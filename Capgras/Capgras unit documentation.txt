| Cailey Marie Bianchini|
| :---          	|
| Capgras |
|  |
| Programming class 2022 |
|December 4, 2020|

## I. Requirements

1. Description of Problem

	- **Name**: Topia

	- **Problem Statement**: In 24 hours create a game within the prompt
	
	- **Problem Specifications**:  must be on console and the theme should be about "Within"
    

2. Input Information
- the player will be able to use keys A, D, E, and [SPACE]

1.  Output Information
- A - this always the player to move left
- D - this always the player to move right
- E - this always the player to use the door and wardrobe
- [SPACE] - will make the player "Jump"
 
## II. Errors

    1. will not allow to go to next scene after the second scene

### III. Graphics
This is the menu
![image](GAme/Menu.PNG)

Wardrobe that the player hides in
![image](GAme/coset.PNG)

This is the player 
![image](GAme/facing.PNG)

#### Object Information

**File**: Program.cs

**Attributes**

         Name: Main(string[] args)
             Description: This will start the program in what ever is in Game()
             Type: static void

**File**: Game.cs

**Attributes**

         Name: Main(string[] args)
             Description: This creates a new Game() and runs Game's Run()
             Type: static void


**File**: Game.cs
Menu
![image](GAme/Menu.PNG)

The first tutorial that teaches movement
![Capgras](GAme/tutorial 1.png)

the second that teaches player to ju,p
![Capgras](GAme/tutorial 2.PNG)

**Attributes**

         Name: CurrentSceneIndex
             Description: A property that gets and returns _crrentSceneIndex
             Type: public static
         Name: DefaultColor
             Description: A property that gets and sets ConsoleColor to White
             Type:  public static ConsoleColor
         Name: SetGameOver(int index)
             Description: this sets a "value" to _gameOver and allows it to beused everywhere in the program
             Type: public static void
         Name: GetScene(int index)
             Description: makes index a new index if its less then 0 and if its greater than zero then it returns the value of _scenes[index]
             Type: public static Scene
         Name: GetCurrentScene
             Description: returns the value of _currentSceneIndes for _scenes
             Type: public static Scene
         Name: CurremtScene
             Description:  returns the value of _currentSceneIndes for _scenes
             Type: public static Scene
         Name: AddScene(Scene scene)
             Description:  Adds an item to the scenes array
             Type: public static int
         Name: RemoveScene(Scene scene)
             Description:  this takes out an item from scenes array
             Type: public static bool
         Name: SetCurrentScene(int index)
             Description:  this makes sure there is a scene, starts it and sets the index for current scene
             Type: public static void
         Name: GetKeyDown(int key)
             Description:  returns the raylib keynoard key that was pressed
             Type: public static bool
         Name: GetKeyPressed
             Description:  similar to GetKeyDown() but this helps prevent lag
             Type: public static bool
         Name: Game()
             Description:  this creates the first scene
             Type: public
         Name: Start()
             Description:  this creates and imports everthing for the game to have images and such
             Type: public void
         Name: Update(float deltaTime)
             Description:  this checks to see if the scenes have started and if not then it must start
             Type: public void
         Name:  Draw()
             Description:  this will allow the program to begin drawing and everything that needs to be draw will be drawn. It will also clears the screen just in case if theres anything else
             Type: public void
         Name: End()
             Description:  this will take the started index and ends it
             Type: public void
         Name: Run()
             Description:  this will keep the program running until gameOver is true
             Type: public void

**File**: Actor.cs

**Attributes**

         Name: Started
             Description:  property that makes start have a privated value
             Type: public bool
         Name: SetTranslate(Vector2 position)
             Description:  this allows translation to have a value using the position and the math libraries Matrix
             Type: public void
         Name: SetRotation(float radians)
             Description:  this allows rotation to have a value using the radians and the math libraries Matrix
             Type: public void
         Name: Rotate(float radians)
             Description:  this multiplies the rotation with math library Matrix with radians
             Type: public void
         Name: localRotate(float angle)
             Description:  this creates a rotation that will only apply to location depending on actors parent location
             Type: public void
         Name: LookAt(Vector2 position)
             Description:  this will take the players position and make the player face a . . . direction using dotproduct 
             Type: public void
         Name: SetScale(float x, float y)
             Description:  with the use of x and y it allows the value of scale to depend on that while using Math Library Vector2
             Type: public void
         Name: UpdateTransform()
             Description:  makes the local transformation be the value of * translation, rotation and scale. It will also check to see wether or not actor has a parent, is so it grabs the parents transforms, if not it makes its own global transform.
             Type: private void
         Name: Forward
             Description:  grabs local position and gives a normalized value and returns it as a global 
             Type: public Vector2
         Name: WorldPosition
             Description:  a property that gets global transform
             Type: public Vector2
         Name: LocalPosition
             Description:  a property that gets the local transform then returns to where its wanted
             Type: public Vector2
         Name: Velocity
             Description:  makes velocity have a value and returns that value
             Type: public Vector2
         Name: Acceleration
             Description:  makes acceleration have a value and returns that value
             Type: public Vector2
         Name: MaxSpeed
             Description:  makes maxSpeed have a value and returns that value
             Type: public float
         Name: AddChild(Actor child)
             Description:   this adds a named actor to an array and makes it depend on named parent
             Type: public void 
         Name: RemoveChild(Actor child)
             Description:  this will remove the named actor from the array 
             Type: public bool
         Name: UpdateFacing()
             Description:  this will update the forward function if velocity.magnigtude is equal to or less than 0
             Type: private void
         Name: Start()
             Description:  this makes sure Started is true
             Type: public virtual void
         Name: Update(float deltaTime)
             Description:  This will apply all Update functions and apply math for local position
             Type: public virtual void
         Name: Draw()
             Description:  this applies position to Window and makes sure the icon is staying in border
             Type: public virtual void
         Name: End()
             Description:  this makes Started = false
             Type: public virtual void

**File**: Scene.cs 
**Attributes**

         Name: Started
             Description:  gives privated value to started and returns it
             Type: public bool
         Name: Scene()
             Description:  creates a new actor array
             Type: public
         Name: World
             Description:  grabs the value of transform
             Type: public Matrix3
         Name: AddActor(Actor actor)
             Description:  This adds a named actory to an array
             Type: public void
         Name: RemoveActor(int index)
             Description:  return wether true or not if named actor has been removed from array
             Type: public bool
         Name: RemoveActor(Actor actor)
             Description:  return wether true or not if named actor has been removed from array
             Type: public bool
         Name: CheckCollision(Actor actor)
             Description:  returns false
             Type: public bool
         Name: Update(float deltaTime)
             Description:  it checks collision and the goes through actors entire array and starts all of them
             Type: public virtual void
         Name: Draw()
             Description:  this will go through the entire array of actors and draw them
             Type: public virtual void
         Name: End()
             Description:  this will go through entire list of actors and end it
             Type: public virtual void


**File**: Player.cs : Actor.cs
**Attributes**

         Name: Speed
             Description:  this gives value to speed and returns it
             Type: public float
         Name: Draw()
             Description:  this applies the asigned icon and uses actors base Draw for the rest
             Type: public override void
         Name: Update(float deltaTime)
             Description:  this makes the player able to input keys and move where they want, this will also change the images depending how they move.
             Type: public override void


**File**: Door.cs : Actor.cs
**Attributes**

         Name: CheckPlayerDistance()
             Description:  checks to see if players distance is within 8 and if its > its false, <= 8 then its true
             Type: private bool
         Name: Draw()
             Description:  uses the Actors Update while applying Doors specific icon
             Type: public override void
         Name: Update(float deltaTime)
             Description:  this checks to see if CheckPlayerDistance is true or not and if player chose E, if both true then it goes to next scene.
             Type: public override void

**File**: Sprite.cs
**Attributes**

         Name: Width
             Description:  property that calls for the value of textures width
             Type: public int
         Name: Height
             Description:  property that calls for the value of textures height
             Type: public int
         Name: Draw(Matrix3 transform)
             Description:  this will draw the sprite (image) using x and y data and applying transforms to it
             Type: 

**File**: Setting.cs
**Attributes**

         Name: Draw()
             Description:  this will draw bedroom image
             Type: public override void
**File**: Arm.cs : Actor.cs
**Attributes**

         Name: Draw()
             Description:  this will draw the arm image
             Type: public override void
         Name: Update(float deltaTime)
             Description:  this will check to see what buttons are pushed and update the image while also making the image seems like its moving while player is walking
             Type: public override void

**File**: Leg.cs : Actor.cs
**Attributes**

         Name: Draw()
             Description:  this wil draw the legs image
             Type: public override void
         Name: Update(float deltaTime)
             Description:  this will check to see what buttons are pushed and update the image while also making the image seem like it moving while player is walking.
             Type: public override void

**File**: Wardrobe.csu : Actor.cs
**Attributes**

         Name: CheckPlayerDistance()
             Description:  this will check to see if player is within range of enemies specific vision
             Type: private bool
         Name: Draw()
             Description:  this will draw the updated image of the wardrobe
             Type: public override void
         Name: Update(float deltaTime)
             Description:  this will check if player is within distance and if player chose e, if true player hides in closet
             Type: public override void

**File**: Menu.cs : Actor.cs
**Attributes**

         Name: CheckPlayerDistance()
             Description:  this will check if player is in distance of this actor
             Type: private bool
         Name: Draw()
             Description:  It will draw the menu image
             Type: public override void
         Name: Update(float deltaTime)
             Description:  if player is within distance and presses E, it will move onto next scene
             Type: public override void

**File**: Paintings.cs
**Attributes**

         Name: Draw()
             Description:  It will draw the painting image
             Type: public override void

**File**: Paintings.cs : Actor.cs
**Attributes**

         Name: Draw()
             Description:  It will draw the menu image
             Type: public override void

**File**: Fog.cs : Actor.cs
**Attributes**
This will be updated to change image depending on character's mental state
         Name: Draw()
             Description:  It will draw the menu image
             Type: public override void

**File**: Tutorial.cs : Actor.cs
**Attributes**

         Name: Draw()
             Description:  It will draw the tutorial image 1
             Type: public override void

**File**: Tutorial2.cs : Actor.cs
**Attributes**

         Name: Draw()
             Description:  It will draw the tutorial image 2
             Type: public override void

**File**: Hallway.cs : Actor.cs
**Attributes**
this will soon be conbined with other setting scenes
         Name: Draw()
             Description:  It will draw the Hallway image
             Type: public override void















































